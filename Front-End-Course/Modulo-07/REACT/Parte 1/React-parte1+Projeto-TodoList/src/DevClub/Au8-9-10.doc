- Aula 8 - JSX, Aula 9 Estrutura e Aula 10 React Fragment:

    - Escrevendo marcação com JSX:

        - JSX é uma extensão de sintaxe para JavaScript que permite que você escreva marcação semelhante a HTML dentro de um arquivo JavaScript. Embora existam outras maneiras de escrever componentes, a maioria dos desenvolvedores React prefere a concisão do JSX, e a maioria das bases de código o usa.

    - Você aprenderá:

        - Por que o React mistura marcação com lógica de renderização.
        - Como JSX é diferente de HTML. 
        - Como exibir informações com JSX.
        - JSX: Colocando marcação em JavaScript.

    - A Web foi construída em HTML, CSS e JavaScript. Por muitos anos, os desenvolvedores web mantiveram o conteúdo em HTML, o design em CSS e a lógica em JavaScript — geralmente em arquivos separados! O conteúdo era marcado dentro do HTML enquanto a lógica da página vivia separadamente em JavaScript:

    - Marcação HTML com fundo roxo e uma div com duas tags filhas: p e form.

    - HTML: 

        - Três manipuladores JavaScript com fundo amarelo: onSubmit, onLogin e onClick.

    - JavaScript:

        - Mas, à medida que a Web se tornou mais interativa, a lógica determinou cada vez mais o conteúdo. O JavaScript estava no comando do HTML! É por isso que no React, a lógica de renderização e a marcação vivem juntas no mesmo lugar — componentes.

        - Componente React com HTML e JavaScript de exemplos anteriores misturados. O nome da função é Sidebar, que chama a função isLoggedIn, destacada em amarelo. Aninhada dentro da função destacada em roxo está a tag p de antes, e uma tag Form referenciando o componente mostrado no próximo diagrama.

    - Sidebar.jsComponente React:

        - Componente React com HTML e JavaScript de exemplos anteriores misturados. O nome da função é Form contendo dois manipuladores onClick e onSubmit destacados em amarelo. Seguindo os manipuladores está o HTML destacado em roxo. O HTML contém um elemento form com um elemento input aninhado, cada um com uma prop onClick.

    - Form.jsComponente React:

        - Manter a lógica de renderização e a marcação de um botão juntas garante que elas fiquem sincronizadas uma com a outra em cada edição. Por outro lado, detalhes que não são relacionados, como a marcação do botão e a marcação de uma barra lateral, são isolados um do outro, tornando mais seguro alterar qualquer um deles por conta própria.

    - Cada componente React é uma função JavaScript que pode conter alguma marcação que o React renderiza no navegador. Os componentes React usam uma extensão de sintaxe chamada JSX para representar essa marcação. O JSX se parece muito com HTML, mas é um pouco mais rigoroso e pode exibir informações dinâmicas. A melhor maneira de entender isso é converter alguma marcação HTML para marcação JSX.

    - Observação:

        - JSX e React são duas coisas separadas. Eles são frequentemente usados ​​juntos, mas você pode  usá-los independentemente um do outro. JSX é uma extensão de sintaxe, enquanto React é uma biblioteca JavaScript.

    - Convertendo HTML para JSX:

        - Suponha que você tenha algum HTML (perfeitamente válido):

            <h1>Hedy Lamarr's Todos</h1>
            <img 
            src="https://i.imgur.com/yXOvdOSs.jpg" 
            alt="Hedy Lamarr" 
            class="photo"
            >
            <ul>
                <li>Invent new traffic lights
                <li>Rehearse a movie scene
                <li>Improve the spectrum technology
            </ul>
            E você quer colocá-lo em seu componente:

            export default function TodoList() {
            return (
                // ???
            )
            }

        - Se você copiar e colar como está, não funcionará:

            export default function TodoList() {
            return (
                // This doesn't quite work!
                <h1>Hedy Lamarr's Todos</h1>
                <img 
                src="https://i.imgur.com/yXOvdOSs.jpg" 
                alt="Hedy Lamarr" 
                class="photo"
                >
                <ul>
                <li>Invent new traffic lights
                <li>Rehearse a movie scene
                <li>Improve the spectrum technology
                </ul>
            );
            }


            Error
            /src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (5:4)

            3 |     // This doesn't quite work!
            4 |     <h1>Hedy Lamarr's Todos</h1>
            > 5 |     <img 
                |     ^
            6 |       src="https://i.imgur.com/yXOvdOSs.jpg" 
            7 |       alt="Hedy Lamarr" 
            8 |       class="photo"

        - Isso ocorre porque o JSX é mais rigoroso e tem algumas regras a mais que o HTML! Se você ler as mensagens de erro acima, elas o guiarão para corrigir a marcação, ou você pode seguir o guia abaixo.

    - Observação:

        - Na maioria das vezes, as mensagens de erro na tela do React ajudarão você a encontrar onde está o problema. Dê uma lida se você ficar preso!

    - As regras do JSX:

        - 1. Retornar um único elemento raiz("PAI"):

            - Para retornar vários elementos de um componente, envolva-os com uma única tag pai.

                - Por exemplo, você pode usar um <div>:

                    <div>
                    <h1>Hedy Lamarr's Todos</h1>
                    <img 
                        src="https://i.imgur.com/yXOvdOSs.jpg" 
                        alt="Hedy Lamarr" 
                        class="photo"
                    >
                    <ul>
                        ...
                    </ul>
                    </div>

                - Se você não quiser adicionar nada extra <div>à sua marcação, você pode escrever <> e </> em vez disso:

                    <>
                    <h1>Hedy Lamarr's Todos</h1>
                    <img 
                        src="https://i.imgur.com/yXOvdOSs.jpg" 
                        alt="Hedy Lamarr" 
                        class="photo"
                    >
                    <ul>
                        ...
                    </ul>
                    </>

                - Essa tag vazia é chamada de Fragment. Fragments permitem que você agrupe coisas sem deixar rastros na árvore HTML do navegador.

    - Mergulho profundo:

        - Por que várias tags JSX precisam ser encapsuladas?

            - JSX parece HTML, mas por baixo do capô ele é transformado em objetos JavaScript simples. Você não pode retornar dois objetos de uma função sem envolvê-los em um array. Isso explica por que você também não pode retornar duas tags JSX sem envolvê-las em outra tag ou um Fragment.

    - 2. Feche todas as tags:

        - O JSX exige que as tags sejam fechadas explicitamente: tags de fechamento automático como <img> devem se tornar <img />, e tags de encapsulamento como <li> oranges devem ser escritas como <li>oranges</li>.

        - É assim que a imagem e os itens da lista de Hedy Lamarr ficam fechados:

            <>
            <img 
                src="https://i.imgur.com/yXOvdOSs.jpg" 
                alt="Hedy Lamarr" 
                class="photo"
            />
            <ul>
                <li>Invent new traffic lights</li>
                <li>Rehearse a movie scene</li>
                <li>Improve the spectrum technology</li>
            </ul>
            </>

    - 3. camelCase a maioria das coisas!:

        - JSX se transforma em JavaScript e atributos escritos em JSX se tornam chaves de objetos JavaScript. Em seus próprios componentes, você frequentemente desejará ler esses atributos em variáveis. Mas JavaScript tem limitações em nomes de variáveis. Por exemplo, seus nomes não podem conter traços ou ser palavras reservadas como class.

        - É por isso que, no React, muitos atributos HTML e SVG são escritos em camelCase. Por exemplo, em vez de stroke-width você usa strokeWidth. Como classé uma palavra reservada, no React você escreve className, nomeado após a propriedade DOM correspondente:

            <img 
            src="https://i.imgur.com/yXOvdOSs.jpg" 
            alt="Hedy Lamarr" 
            className="photo"
            />

        - Você pode encontrar todos esses atributos na lista de props do componente DOM. Se você errar um, não se preocupe — o React imprimirá uma mensagem com uma possível correção no console do navegador.

    - Armadilha:

        - Por razões históricas, aria-*os data-*atributos são escritos como em HTML, com traços.

    - Dica profissional: use um conversor JSX:

        - Converter todos esses atributos em marcação existente pode ser tedioso! Recomendamos usar um conversor para traduzir seu HTML e SVG existentes para JSX. Conversores são muito úteis na prática, mas ainda vale a pena entender o que está acontecendo para que você possa escrever JSX confortavelmente por conta própria.

    - Aqui está seu resultado final:

        export default function TodoList() {
        return (
            <>
            <h1>Hedy Lamarr's Todos</h1>
            <img 
                src="https://i.imgur.com/yXOvdOSs.jpg" 
                alt="Hedy Lamarr" 
                className="photo" 
            />
            <ul>
                <li>Invent new traffic lights</li>
                <li>Rehearse a movie scene</li>
                <li>Improve the spectrum technology</li>
            </ul>
            </>
        );
        }

    - Recapitular:

        - Agora você sabe por que o JSX existe e como usá-lo em componentes:

            - Os componentes do React agrupam a lógica de renderização junto com a marcação porque eles são relacionados.
            - JSX é similar ao HTML, com algumas diferenças. Você pode usar um conversor se precisar.
            - Mensagens de erro geralmente indicam a direção certa para corrigir sua marcação.

    - JavaScript em JSX com chaves:

        - A sintaxe JSX permite que você escreva tags similares ao HTML dentro de um arquivo JavaScript, mantendo a lógica de renderização e o conteúdo no mesmo local. Às vezes, você pode querer adicionar um pouco de lógica JavaScript ou referenciar uma propriedade dinâmica dentro deste bloco de tags. Nessa situação, você pode usar chaves em seu JSX para abrir uma janela para o JavaScript.

    - Você aprenderá:

        - Como passar strings com aspas.
        - Como fazer referência a uma variável JavaScript dentro do JSX usando chaves.
        - Como chamar uma função JavaScript dentro da JSX com chaves.
        - Como usar um objeto JavaScript dentro da JSX com chaves.
        
    - Passando strings com aspas.
        
        - Quando você quiser passar um atributo de string para a JSX, coloque-o entre aspas simples ou duplas:

            export default function Avatar() {
            return (
                <img
                className="avatar"
                src="https://i.imgur.com/7vQD0fPs.jpg"
                alt="Gregorio Y. Zara"
                />
            );
            }

        - Neste caso, "https://i.imgur.com/7vQD0fPs.jpg" e "Gregorio Y. Zara" estão sendo passados como strings.

        - Mas e se você quiser especificar dinamicamente o atributo src ou alt? Você poderia usar um valor do JavaScript substituindo " e " por { e }:

            export default function Avatar() {
            const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';
            const description = 'Gregorio Y. Zara';
            return (
                <img
                className="avatar"
                src={avatar}
                alt={description}
                />
            );
            }


        - Perceba a diferença entre className="avatar", que especifica um nome de classe CSS "avatar" para tornar a imagem redonda, e src={avatar}, que lê o valor da variável JavaScript chamada avatar. Isso ocorre porque as chaves permitem que você trabalhe com JavaScript diretamente em seu bloco de tags!

    - Usando chaves: Uma janela para o mundo do JavaScript.

        - JSX é uma forma especial de escrever JavaScript. Isso significa que é possível usar JavaScript dentro dela - com chaves { }. O exemplo abaixo primeiro declara um nome para o cientista, name, e depois o insere o dentro do <h1> com chaves:

            export default function TodoList() {
            const name = 'Gregorio Y. Zara';
            return (
                <h1>{name}'s To Do List</h1>
            );
            }


        - Tente trocar o valor do name de 'Gregorio Y. Zara' para 'Hedy Lamarr'. Está vendo como o título da lista muda?

        - Qualquer expressão JavaScript funcionará entre chaves, incluindo chamadas de função como formatDate():

            const today = new Date();

            function formatDate(date) {
            return new Intl.DateTimeFormat(
                'en-US',
                { weekday: 'long' }
            ).format(date);
            }

            export default function TodoList() {
            return (
                <h1>To Do List for {formatDate(today)}</h1>
            );
            }

    - Onde usar chaves:

        - Você só pode usar chaves de duas maneiras dentro da JSX:

        - Como texto diretamente dentro de uma tag JSX: <h1>{nome}'s To Do List</h1> funciona, porém <{tag}>Gregorio Y. Zara's To Do List</{tag}> não funcionará.

        - Como atributos imediatamente após o sinal =: src={avatar} lerá a variável avatar, mas src="{avatar}" passará a string "{avatar}".

        - Uso de “chaves duplas”: CSS e outros objetos em JSX:

            - Além de strings, números e outras expressões JavaScript, você pode até passar objetos em JSX. Os objetos também são denotados por chaves, como { name: "Hedy Lamarr", inventions: 5 }. Portanto, para passar um objeto JS em JSX, você deve envolver o objeto em outro par de chaves: person={{ name: "Hedy Lamarr", inventions: 5 }}.

        - Você pode ver isso com estilos CSS em linha na JSX. O React não exige que você use estilos inline (as classes CSS funcionam muito bem na maioria dos casos). Mas quando você precisa de um estilo inline, você passa um objeto para o atributo style:

            export default function TodoList() {
            return (
                <ul style={{
                backgroundColor: 'black',
                color: 'pink'
                }}>
                <li>Improve the videophone</li>
                <li>Prepare aeronautics lectures</li>
                <li>Work on the alcohol-fuelled engine</li>
                </ul>
            );
            }

    - Tente alterar os valores de backgroundColor e color.

        - Você pode ver claramente o objeto JavaScript dentro das chaves quando o escreve dessa forma:

            <ul style={
            {
                backgroundColor: 'black',
                color: 'pink'
            }
            }>

        - Da próxima vez que você encontrar {{ e }} em JSX, saiba que isso é nada mais do que um objeto dentro das chaves da JSX!

    - Armadilha:

        - As propriedades de style em linha são escritas em camelCase. Por exemplo, o HTML <ul style="background-color: black"> seria escrito como <ul style={{ backgroundColor: 'black' }}> em seu componente.

    - Mais diversão com objetos JavaScript e chaves:

        - Você pode colocar várias expressões dentro de um objeto e referenciá-las em seu JSX dentro de chaves:

            const person = {
            name: 'Gregorio Y. Zara',
            theme: {
                backgroundColor: 'black',
                color: 'pink'
            }
            };

            export default function TodoList() {
            return (
                <div style={person.theme}>
                <h1>{person.name}'s Todos</h1>
                <img
                    className="avatar"
                    src="https://i.imgur.com/7vQD0fPs.jpg"
                    alt="Gregorio Y. Zara"
                />
                <ul>
                    <li>Improve the videophone</li>
                    <li>Prepare aeronautics lectures</li>
                    <li>Work on the alcohol-fuelled engine</li>
                </ul>
                </div>
            );
            }

        - Neste exemplo, o objeto JavaScript person contém uma string name e um objeto theme:

            const person = {
            name: 'Gregorio Y. Zara',
            theme: {
                backgroundColor: 'black',
                color: 'pink'
            }
            };

        - O componente pode usar os valores de person da seguinte forma:

            <div style={person.theme}>
            <h1>{person.name}'s Todos</h1>

        - JSX é uma linguagem de modelação mínima, pois permite que você organize dados e lógica usando JavaScript.

    - Recapitular:

        - Agora você sabe quase tudo sobre JSX:

            - Os atributos JSX entre aspas são passados como strings.
            - As chaves permitem que você inclua a lógica e as variáveis do JavaScript em seu bloco de tags.
            - Elas funcionam dentro do conteúdo da tag JSX ou imediatamente após = em atributos.
            - {{ e }} não é uma sintaxe especial: é um objeto JavaScript colocado entre chaves JSX.