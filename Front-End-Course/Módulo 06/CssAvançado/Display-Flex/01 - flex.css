/*
    - Propriedades que aplicam no container.

        - Flex-direction: 
            - Define a direção dos flex itens. Por padrão ele é row (linha), por isso quando o display: flex; é adicionado, os elementos ficam em linha, um do lado do outro.

            - A mudança de row para column geralmente acontece quando estamos definindo os estilos em media queries para o mobile. Assim você garante que o conteúdo seja apresentado em coluna única.

            - Row
            - Row-revers
            - Column
            - Column-revers

        - Flex-wrap: 
            - Define se os itens devem quebrar ou não a linha. Por padrão eles não quebram linha, isso faz com que os flex itens sejam compactados além do limite do conteúdo.

            - Essa é geralmente uma propriedade que é quase sempre definida como flex-wrap: wrap; Pois assim quando um dos flex itens atinge o limite do conteúdo, o último item passa para a coluna debaixo e assim por diante.

            - Now-Rap
            - Wrap
            - Wrap-revers

        - Flex-flow: 
            - O flex-flow é um atalho para as propriedades flex-direction e flex-wrap. Você não verá muito o seu uso, pois geralmente quando mudamos o flex-direction para column, mantemos o padrão do flex-wrap que é nowrap.

            - E quando mudamos o flex-wrap para wrap, mantemos o padrão do flex-direction que é row.

            - Row nowrap
            - Row wrap
            - Column nowrap

            // Sintaxe -> "flex-flow: row-revers wrap".
            // Primeiro parâmetro é do flex-direction e o segundo do flex-wrap. 

    - No display-flex e no display-grid, nós trabalhamos com "dois eixos".

        - MAIN AXIS -> Eixo princípal.
        - CROSS AXIS -> Eixo secundário.

    - Quando o display é "row", o eixo "princípal" é o 'horizonal' e o "secundário vertical".

    - Quando está em "column", o eixo princípal é o "vertical" e o "secundário horizontal".

        - Justify-content: 
            - Alinha os itens flex no container de acordo com a direção. A propriedade só funciona se os itens atuais não ocuparem todo o container. Isso significa que ao definir flex: 1; ou algo similar nos itens, a propriedade não terá mais função

            - Excelente propriedade para ser usada em casos que você deseja alinhar um item na ponta esquerda e outro na direita, como em um simples header com marca e navegação.

            - Flex-start
            - Flex-end
            - Center
            - Space-between
            - Space-around

        - Align-items: 
            - O align-items alinha os flex itens de acordo com o eixo do container. O alinhamento é diferente para quando os itens estão em colunas ou linhas.

            - Essa propriedade permite o tão sonhado alinhamento central no eixo vertical, algo que antes só era possível com diferentes hacks.

            - Stretch - Estica o item para ocupar todo espaço disponivel.
            - Flex-start
            - Flex-end
            - Center
            - Space-between
            - Space-around

        - Align-content:
            - Alinha as linhas do container em relação ao eixo vertical. A propriedade só funciona se existir mais de uma linha de flex-itens. Para isso o flex-wrap precisa ser wrap.

            - Além disso o efeito dela apenas será visualizado caso o container seja maior que a soma das linhas dos itens. Isso significa que se você não definir height para o container, a propriedade não influencia no layout.

            - Stretch - Estica o item para ocupar todo espaço disponivel.
            - Flex-start
            - Flex-end
            - Center
            - Space-between
            - Space-around

        - Gap:
            - Espaçamento entre os itens.

    - Propriedades que aplicam nos itens.
        - Os Flex Itens são os filhos diretos do Flex Container, lembrado que uma tag se torna um flex container a partir do momento que você definir display: flex.

        - É possível que um Flex Item seja também um Flex Container, basta definir display: flex nele. Assim os filhos desse item também serão flex itens.

        - Flex-basis:
            - Indica o tamanho inicial do flex item antes da distribuição do espaço restante.

            - Quando definimos o flex-grow: 1; e possuímos auto no basis, o valor restante para ocupar o container é distribuído ao redor do conteúdo do flex-item.

            - Flex-start
            - Flex-end
            - Center
            - Space-between
            - Space-around

        - Flex-grow:
            - Define a habilidade de um flex item crescer. Por padrão o valor é zero, assim os flex itens ocupam um tamanho máximo relacionado o conteúdo interno deles ou ao width definido.

            - Ao definir 1 para todos os Flex Itens, eles tentarão ter a mesma largura e vão ocupar 100% do container. Digo tentarão pois caso um elemento possua um conteúdo muito largo, ele irá respeitar o mesmo.

            - Se você tiver uma linha com quatro itens, onde três são flex-grow: 1 e um flex-grow: 2, o flex-grow: 2 tentará ocupar 2 vezes mais espaço extra do que os outros elementos.

            - OBS: justify-content não funciona em items com flex-grow definido.

        - Flex-shrink:
            - Define a capacidade de redução de tamanho do item.
            
        - Flex:
            - Atalho para as propriedades flex-grow, flex-shrink e flex-basis. Geralmente você verá a propriedade flex nos flex itens ao invés de cada um dos valores separados.

            - Para melhor consistência entre os browsers, é recomendado utilizar a propriedade flex ao invés de cada propriedade separada.

            - No exemplo é possível ver as mesmas configurações do exemplo do flex-basis porém agora utilizando apenas a propriedade flex.

        - Order:
            - Modifica a ordem dos flex itens. Sempre do menor para o maior, assim order: 1, aparece na frente de order: 5.
        
        - Align-self:
            - O align-self serve para definirmos o alinhamento específico de um único flex item dentro do nosso container. Caso um valor seja atribuído, ele passara por cima do que for atribuído no align-items do container.

            - Vale lembrar que o alinhamento acontece tanto em linha quanto em colunas. Por exemplo o flex-start quando os itens estão em linhas, alinha o item ao topo da sua linha. Quando em colunas, alinha o item ao início (esquerda) da coluna.
    
    - Site para praticar: https://origamid.com/projetos/flexbox-guia-completo/

*/



* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

h1 {
    text-align: center;
}

.container {
    margin: 10px;
    border: 1px solid #9758a6;

    /* Por padrão o display flex é inline. */
    display: flex;

    /* justify-content */
    /* height: 800px;
    width: 800px; */

    /* align-items */
    height: 700px;
}

.block {
    width: 100px;
    height: 100px;
    background: #cdd728;
    border: 5px solid #9758a6;
    border-radius: 5px;
    color: black;
    font-weight: bold;
    text-align: center;
    margin: 10px;
}